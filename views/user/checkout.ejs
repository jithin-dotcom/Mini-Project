<%- include("../../views/partials/user/header") %>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
<!-- SweetAlert CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<!-- SweetAlert JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<main class="main" style="margin-top: 150px;">

    <!-- Page Header -->
    <div class="page-header breadcrumb-wrap">
        <div class="container">
            <div class="breadcrumb">
                <a href="/" rel="nofollow">Home</a>
                <span></span> Checkout
            </div>
        </div>
    </div>

    <section class="mt-50 mb-50" style="margin-bottom: 100px;">
        <div class="container">
            <div class="row">
                <!-- Checkout Form -->
                <div class="col-md-8">

                    <h4 class="mb-4">Select a Shipping Address</h4>
                    <% if (addresses && addresses.length > 0) { %>
                        <form id="checkoutForm">
                            <div class="list-group">
                                <% addresses.forEach((addressDoc) => { %>
                                    <% addressDoc.address.forEach((address, index) => { %>
                                        <label class="list-group-item d-flex align-items-start">
                                            <input type="radio" name="selectedAddress" value="<%= address._id %>" class="form-check-input me-3" <%= index === 0 ? 'checked' : '' %> >
                                            <div>
                                                <h6 class="mb-1"><%= address.name %></h6>
                                                <p class="mb-0">
                                                    <%= address.city %>, <%= address.state %>, <%= address.pincode %><br>
                                                    <strong>Landmark:</strong> <%= address.landMark %><br>
                                                    <strong>Phone:</strong> <%= address.phone %> 
                                                    <% if (address.altPhone) { %>
                                                        <br><strong>Alt Phone:</strong> <%= address.altPhone %>
                                                    <% } %>
                                                </p>
                                            </div>
                                        </label>
                                    <% }); %>
                                <% }); %>
                            </div>
                        </form>
                    <% } else { %>
                        <p>No saved addresses found. Please add a new address below.</p>
                    <% } %>
                       


                             <!-- Form to add a new address -->
<h4 class="mt-5">Add a New Address</h4>
<form id="addAddressForm" action="/addAddressForOrder" method="POST" name="selectedAddress" >
    <div class="mb-3">
        <label for="addressType" class="form-label">Address Type</label>
        <input type="text" class="form-control" id="addressType" name="addressType" required>
    </div>
    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <input type="text" class="form-control" id="name" name="name" required>
    </div>
    <div class="mb-3">
        <label for="street" class="form-label">Street</label>
        <input type="text" class="form-control" id="street" name="street" required>
    </div>
    <div class="mb-3">
        <label for="landMark" class="form-label">Landmark</label>
        <input type="text" class="form-control" id="landMark" name="landMark" required>
    </div>
    <div class="mb-3">
        <label for="city" class="form-label">City</label>
        <input type="text" class="form-control" id="city" name="city" required>
    </div>
    <div class="mb-3">
        <label for="state" class="form-label">State</label>
        <input type="text" class="form-control" id="state" name="state" required>
    </div>
    <div class="mb-3">
        <label for="pincode" class="form-label">Pincode</label>
        <input type="text" class="form-control" id="pincode" name="pincode" required>
    </div>
    <div class="mb-3">
        <label for="phone" class="form-label">Phone</label>
        <input type="text" class="form-control" id="phone" name="phone" required>
    </div>
    <div class="mb-3">
        <label for="altPhone" class="form-label">Alternate Phone (optional)</label>
        <input type="text" class="form-control" id="altPhone" name="altPhone">
    </div>
    <button type="submit" class="btn btn-primary">Add Address</button>
</form>

                

                </div>

                <!-- Order Summary -->
                <div class="col-md-4">
                    <h4 class="mb-4">Order Summary</h4>
                    <ul class="list-group mb-3">
                        <% if (cart && cart.length > 0) { %>
                            <% let total = 0; %>
                            <% cart.forEach((item) => { %>
                                <% total += item.quantity * item.productId.salePrice; %>
                                <li class="list-group-item d-flex justify-content-between">
                                    <span><%= item.productId.productName %> (x<%= item.quantity %>)</span>
                                    <strong>₹<%= item.quantity * item.productId.salePrice %></strong>
                                </li>
                            <% }); %>
                             
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Coupon Discount</span>
                                <strong id="couponDiscount">
                                    ₹0
                                </strong>
                            </li>


                            <li class="list-group-item d-flex justify-content-between">
                                <span>Total</span>
                                <strong id="totalAmount">
                                    ₹<%= totalPrice %>
                                </strong>
                            </li>
                            



                            <!-- <li class="list-group-item d-flex justify-content-between">
                                <span>Total</span>
                                <strong id="totalAmount">
                                    ₹<%= typeof session.totalPrice !== 'undefined' ? session.totalPrice : total %>
                                </strong>
                            </li>
                             -->


                            <!-- <li class="list-group-item d-flex justify-content-between">
                                <span>Total</span>
                                <% let finalTotal = total; %>
                                <% if (typeof couponPrice !== 'undefined' && couponPrice > 0) { %>
                                    <% finalTotal = total - couponPrice; %>
                                    <strong id="totalAmount">₹<%= finalTotal %> (Discount Applied: ₹<%= couponPrice %>)</strong>
                                <% } else { %>
                                    <strong id="totalAmount">₹<%= finalTotal %></strong>
                                <% } %>
                            </li> -->
                            


                            <!-- <li class="list-group-item d-flex justify-content-between">
                                <span>Total</span>
                                <strong  id="totalAmount" >₹<%= total %></strong>
                            </li> -->
                        <% } else { %>
                            <li class="list-group-item text-center">
                                No items in cart.
                            </li>
                        <% } %>
                    </ul>
                    
                    
                     <!-- Coupon Section -->
                     <div class="mb-3">
                        <label for="couponCode" class="form-label">Coupon Code</label>
                        <input type="text" class="form-control" id="couponCode" placeholder="Enter coupon code">
                        <button type="button" class="btn btn-primary mt-2" onclick="applyCoupon()">Apply Coupon</button>
                        <button type="button" class="btn btn-danger mt-2" onclick="deleteCoupon()">Delete Coupon</button>
                    </div>
                    
                       
                     <!-- Wallet Balance Section -->
<div class="mb-3" id="walletBalanceContainer" style="display: none;">
    <label class="form-label">Wallet Balance</label>
    <div class="alert alert-info" id="walletBalance">
        <!-- Hardcoded or dynamically populated balance -->
        Your Wallet Balance: ₹<%=wallet.balance%>
    </div>
</div>


                    
                    <div class="mt-4">
                        <h5>Payment Options</h5>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="paymentMethod" id="creditCard" value="creditCard">
                            <label class="form-check-label" for="creditCard">
                                Credit Card
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="paymentMethod" id="debitCard" value="debitCard">
                            <label class="form-check-label" for="debitCard">
                                Debit Card
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="paymentMethod" id="wallet" value="wallet">
                            <label class="form-check-label" for="wallet">
                                Wallet
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="paymentMethod" id="razorpay" value="razorpay">
                            <label class="form-check-label" for="razorpay">
                                Razorpay
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="paymentMethod" id="cashOnDelivery" value="cashOnDelivery">
                            <label class="form-check-label" for="cashOnDelivery">
                                Cash on Delivery
                            </label>
                        </div>
                    </div>



                    <button type="button" class="btn btn-success w-100" onclick="placeOrder()" style="margin-top: 20px;">Place Order</button>

                </div>
            </div>
        </div>
    </section>
</main>

<%- include("../../views/partials/user/footer") %>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>



<script>
    function applyCoupon() {
    const couponCode = document.getElementById('couponCode').value;
    if (!couponCode) {
        Swal.fire({
            icon: 'warning',
            title: 'Oops...',
            text: 'Please enter a coupon code.'
        });
        return;
    }

    fetch('/applyCoupon', {
        method: 'POST',
        body: JSON.stringify({ couponCode }),
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        const totalElement = document.getElementById("totalAmount");
        const discountElement = document.getElementById("couponDiscount");

        if (data.success) {
            totalElement.textContent = `₹${data.newTotal}`;
            discountElement.textContent = `₹${data.couponDiscount}`;
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Coupon applied successfully!'
            });
        } else {
            discountElement.textContent = `₹0`;
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: data.message === 'Coupon cannot be applied. Minimum price not met.'
                    ? 'The coupon cannot be applied because the minimum price is not met.'
                    : 'Invalid or expired coupon.'
            });
        }
    })
    .catch(error => console.error('Error:', error));
}

function deleteCoupon() {
    const couponCode = document.getElementById('couponCode').value;
    if (!couponCode) {
        Swal.fire({
            icon: 'warning',
            title: 'Oops...',
            text: 'Please enter a coupon code to delete.'
        });
        return;
    }

    fetch('/deleteCoupon', {
        method: 'DELETE',
        body: JSON.stringify({ couponCode }),
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        const totalElement = document.getElementById("totalAmount");
        const discountElement = document.getElementById("couponDiscount");

        if (data.success) {
            totalElement.textContent = `₹${data.newTotal}`;
            discountElement.textContent = `₹0`; 
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Coupon deleted successfully!'
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'Failed to delete coupon.'
            });
        }
    })
    .catch(error => console.error('Error:', error));
}


// Listen for changes in the payment method selection
document.querySelectorAll('input[name="paymentMethod"]').forEach((input) => {
    input.addEventListener('change', function () {
        if (this.id === 'wallet') {
            // Show wallet balance if 'Wallet' is selected
            document.getElementById('walletBalanceContainer').style.display = 'block';
        } else {
            // Hide wallet balance for other payment methods
            document.getElementById('walletBalanceContainer').style.display = 'none';
        }
    });
});


</script>


<!--aplied and delete coupon without swal -->>

<!-- 
<script>
    function applyCoupon() {
        const couponCode = document.getElementById('couponCode').value;
        if (!couponCode) {
            alert('Please enter a coupon code.');
            return;
        }

        fetch('/applyCoupon', {
            method: 'POST',
            body: JSON.stringify({ couponCode }),
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            const totalElement = document.getElementById("totalAmount");
            const discountElement = document.getElementById("couponDiscount");

            if (data.success) {
                totalElement.textContent = `₹${data.newTotal}`;
                discountElement.textContent = `₹${data.couponDiscount}`;
                alert('Coupon applied successfully!');
            } else {
                discountElement.textContent = `₹0`;
                if (data.message === 'Coupon cannot be applied. Minimum price not met.') {
                    alert('The coupon cannot be applied because the minimum price is not met.');
                } else {
                    alert('Invalid or expired coupon.');
                }
            }
        })
        .catch(error => console.error('Error:', error));
    }
</script>



<script>
     function deleteCoupon() {
        const couponCode = document.getElementById('couponCode').value;
        if (!couponCode) {
            alert('Please enter a coupon code to delete.');
            return;
        }

        fetch('/deleteCoupon', {
            method: 'DELETE',
            body: JSON.stringify({ couponCode }),
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            const totalElement = document.getElementById("totalAmount");
            const discountElement = document.getElementById("couponDiscount");

            if (data.success) {
                totalElement.textContent = `₹${data.newTotal}`;
                discountElement.textContent = `₹0`; 
                alert('Coupon deleted successfully!');
            } else {
                alert('Failed to delete coupon.');
            }
        })
        .catch(error => console.error('Error:', error));
    }
</script> -->





<!-- Include Razorpay's Checkout script -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
    function placeOrder() {
    const selectedPaymentOption = document.querySelector('input[name="paymentMethod"]:checked');
    const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
    const totalElement = document.getElementById("totalAmount");
    let totalValue = totalElement.textContent.replace("₹", "").trim();
    totalValue = parseFloat(totalValue);

    // Validate payment method
    if (!selectedPaymentOption) {
        Swal.fire({
            icon: 'warning',
            title: 'Payment Option Required',
            text: 'Please select a payment option.'
        });
        return;
    }

    // Validate address
    if (!selectedAddress) {
        Swal.fire({
            icon: 'warning',
            title: 'Address Required',
            text: 'Please select an address.'
        });
        return;
    }

    // Restrict Cash on Delivery for orders above ₹1000
    if (selectedPaymentOption.value === 'cashOnDelivery' && totalValue > 1000) {
        Swal.fire({
            icon: 'error',
            title: 'Payment Method Not Allowed',
            text: 'Orders greater than ₹1000 are not possible with Cash on Delivery.'
        });
        return;
    }

    const cartItems = '<%- JSON.stringify(cart) %>';
    let parsedCartItems;
    try {
        parsedCartItems = JSON.parse(cartItems);
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Cart Error',
            text: 'Error parsing cart items.'
        });
        return;
    }

    const simplifiedCartItems = parsedCartItems.map(item => ({
        productId: item.productId._id,
        productName: item.productId.productName,
        quantity: item.quantity,
        price: item.price,
        size: item.size,
    }));

    if (selectedPaymentOption.value === 'razorpay') {
        // Razorpay payment initiation
        fetch('/createRazorpayOrder', {
            method: 'POST',
            body: JSON.stringify({ amount: totalValue, addressId: selectedAddress.value, paymentMethod: 'razorpay' }),
            headers: { 'Content-Type': 'application/json' }
        })
        .then(response => response.json())
        .then(data => {
            const options = {
                key: data.razorpayKey,
                amount: totalValue * 100,
                currency: "INR",
                name: "Your Company",
                description: "Test Transaction",
                order_id: data.orderId,
                handler: function (response) {
                    verifyPayment(response); // Verify payment success
                },
                prefill: {
                    name: "Sandeep",
                    email: "sandeep@gmail.com",
                    contact: "9847242891"
                },
                modal: {
                    ondismiss: function () {
                        // Handle Razorpay cancellation
                        Swal.fire({
                            icon: 'error',
                            title: 'Payment Cancelled',
                            text: 'Your payment process is cancelled.'
                        }).then(() => {
                            const orderData = {
                                addressId: selectedAddress.value,
                                cartItems: simplifiedCartItems,
                                totalPrice: totalValue,
                                paymentMethod: selectedPaymentOption.value,
                                paymentStatus: 'notCompleted',
                            };

                            // Place order with notCompleted status
                            fetch('/placeOrder', {
                                method: 'POST',
                                body: JSON.stringify(orderData),
                                headers: { 'Content-Type': 'application/json' }
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Order Saved',
                                        text: 'Order saved with status: notCompleted.'
                                    }).then(() => {
                                        window.location.href = '/userProfile#orders';
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Order Failed',
                                        text: data.message || 'Failed to save order.'
                                    });
                                }
                            })
                            .catch(error => console.error('Error:', error));
                        });
                    }
                }
            };
            const rzp1 = new Razorpay(options);
            rzp1.open();
        })
        .catch(error => console.error('Error:', error));
    } else {
        // Handle non-Razorpay payment methods
        const orderData = {
            addressId: selectedAddress.value,
            cartItems: simplifiedCartItems,
            totalPrice: totalValue,
            paymentMethod: selectedPaymentOption.value,
            paymentStatus: 'completed',
        };

        fetch('/placeOrder', {
            method: 'POST',
            body: JSON.stringify(orderData),
            headers: { 'Content-Type': 'application/json' }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Order Placed',
                    text: 'Order placed successfully!'
                }).then(() => {
                    window.location.href = '/shop';
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Order Failed',
                    text: data.message || 'Failed to place order. Please try again.'
                });
            }
        })
        .catch(error => console.error('Error:', error));
    }
}

</script>

<script>
//     function placeOrder() {
//     const selectedPaymentOption = document.querySelector('input[name="paymentMethod"]:checked');
//     if (!selectedPaymentOption) {
//         Swal.fire({
//             icon: 'warning',
//             title: 'Payment Option Required',
//             text: 'Please select a payment option.'
//         });
//         return;
//     }





//    //new code   
//    const totalElement = document.getElementById("totalAmount");
//     let totalValue = totalElement.textContent.replace("₹", "").trim();
//     totalValue = parseFloat(totalValue); // Ensure totalValue is a number

//     if (selectedPaymentOption.value === 'cashOnDelivery' && totalValue > 1000) {
//         Swal.fire({
//             icon: 'error',
//             title: 'Payment Method Not Allowed',
//             text: 'Orders greater than ₹1000 are not possible with Cash on Delivery.'
//         });
//         return;
//     }




//     if (selectedPaymentOption.value === 'razorpay') {
//         const totalValue = document.getElementById("totalAmount").textContent.replace("₹", "").trim();

//         fetch('/createRazorpayOrder', {
//             method: 'POST',
//             body: JSON.stringify({ amount: totalValue, addressId: selectedAddress.value, paymentMethod: 'razorpay' }),
//             headers: { 'Content-Type': 'application/json' }
//         })
//         .then(response => response.json())
//         .then(data => {
//             const options = {
//                 key: data.razorpayKey,
//                 amount: totalValue * 100,
//                 currency: "INR",
//                 name: "Your Company",
//                 description: "Test Transaction",
//                 order_id: data.orderId,
//                 handler: function (response) {
//                     verifyPayment(response);
//                 },
//                 prefill: {
//                     name: "Sandeep",
//                     email: "sandeep@gmail.com",
//                     contact: "9847242891"
//                 },
//                 modal: {
//                     // Handle failure scenario
//                     ondismiss: function () {
//                         Swal.fire({
//                             icon: 'error',
//                             title: 'Payment Cancelled',
//                             text: 'Your  payment process is cancelled.'
//                         }).then(() => {
//                             window.location.href = '/userProfile#orders'; // Redirect to /shop on cancellation
                             

//   //new code begins cancelled razorpay

//                             const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
//         if (!selectedAddress) {
//             Swal.fire({
//                 icon: 'warning',
//                 title: 'Address Required',
//                 text: 'Please select an address.'
//             });
//             return;
//         }

//         const totalElement = document.getElementById("totalAmount");
//         let totalValue = totalElement.textContent.replace("₹", "").trim();
//         const cartItems = '<%- JSON.stringify(cart) %>';
        
//         let parsedCartItems;
//         try {
//             parsedCartItems = JSON.parse(cartItems);
//         } catch (error) {
//             Swal.fire({
//                 icon: 'error',
//                 title: 'Cart Error',
//                 text: 'Error parsing cart items.'
//             });
//             return;
//         }

//         const simplifiedCartItems = parsedCartItems.map(item => ({
//             productId: item.productId._id,
//             productName: item.productId.productName,
//             quantity: item.quantity,
//             price: item.price,
//             size: item.size,
//         }));

//         totalValue = parseFloat(totalValue);

//         const orderData = {
//             addressId: selectedAddress.value,
//             cartItems: simplifiedCartItems,
//             totalPrice: totalValue,
//             paymentMethod: selectedPaymentOption.value,
//             // paymentStatus : 'notCompleted',
//         };

//         fetch('/placeOrder', {
//             method: 'POST',
//             body: JSON.stringify(orderData),
//             headers: { 'Content-Type': 'application/json' }
//         })
//         .then(response => response.json())
//         .then(data => {
//             if (data.success) {
//                 Swal.fire({
//                     icon: 'success',
//                     title: 'Order Placed',
//                     text: 'Order placed successfully!'
//                 }).then(() => {
//                     window.location.href = '/shop';
//                 });
//             } else {
//                 Swal.fire({
//                     icon: 'error',
//                     title: 'Order Failed',
//                     text: data.message || 'Failed to place order. Please try again.'
//                 });
//             }
//         })
//         .catch(error => console.error('Error:', error));

                            

// //new order ends 

//                         });
//                     }
//                 }
//             };
//             const rzp1 = new Razorpay(options);
//             rzp1.open();
//         })
//         .catch(error => console.error('Error:', error));
//     } else {
//         const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
//         if (!selectedAddress) {
//             Swal.fire({
//                 icon: 'warning',
//                 title: 'Address Required',
//                 text: 'Please select an address.'
//             });
//             return;
//         }

//         const totalElement = document.getElementById("totalAmount");
//         let totalValue = totalElement.textContent.replace("₹", "").trim();
//         const cartItems = '<%- JSON.stringify(cart) %>';
        
//         let parsedCartItems;
//         try {
//             parsedCartItems = JSON.parse(cartItems);
//         } catch (error) {
//             Swal.fire({
//                 icon: 'error',
//                 title: 'Cart Error',
//                 text: 'Error parsing cart items.'
//             });
//             return;
//         }

//         const simplifiedCartItems = parsedCartItems.map(item => ({
//             productId: item.productId._id,
//             productName: item.productId.productName,
//             quantity: item.quantity,
//             price: item.price,
//             size: item.size,
//         }));

//         totalValue = parseFloat(totalValue);

//         const orderData = {
//             addressId: selectedAddress.value,
//             cartItems: simplifiedCartItems,
//             totalPrice: totalValue,
//             paymentMethod: selectedPaymentOption.value,
//             // paymentStatus:'completed',
//         };

//         fetch('/placeOrder', {
//             method: 'POST',
//             body: JSON.stringify(orderData),
//             headers: { 'Content-Type': 'application/json' }
//         })
//         .then(response => response.json())
//         .then(data => {
//             if (data.success) {
//                 Swal.fire({
//                     icon: 'success',
//                     title: 'Order Placed',
//                     text: 'Order placed successfully!'
//                 }).then(() => {
//                     window.location.href = '/shop';
//                 });
//             } else {
//                 Swal.fire({
//                     icon: 'error',
//                     title: 'Order Failed',
//                     text: data.message || 'Failed to place order. Please try again.'
//                 });
//             }
//         })
//         .catch(error => console.error('Error:', error));
//     }
// }








//verify payment latest new without redirect

function verifyPayment(response) {
    const paymentDetails = {
        razorpay_payment_id: response.razorpay_payment_id,  //payment_Id
        razorpay_order_id: response.razorpay_order_id,       //payment_Id
        razorpay_signature: response.razorpay_signature,
        cartItems: '<%- JSON.stringify(cart) %>',
        totalPrice: document.getElementById("totalAmount").textContent.replace("₹", "").trim(),
        addressId: selectedAddress.value
    };

    fetch('/verifyRazorpayPayment', {
        method: 'POST',
        body: JSON.stringify(paymentDetails),
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Payment Verified',
                text: 'Payment verified and order placed!'
            }).then(() => {
                const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
                if (!selectedAddress) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Address Required',
                        text: 'Please select an address.'
                    });
                    return;
                }

                const totalElement = document.getElementById("totalAmount");
                let totalValue = totalElement.textContent.replace("₹", "").trim();
                const cartItems = '<%- JSON.stringify(cart) %>';
                
                let parsedCartItems;
                try {
                    parsedCartItems = JSON.parse(cartItems);
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Cart Error',
                        text: 'Error parsing cart items.'
                    });
                    return;
                }

                const simplifiedCartItems = parsedCartItems.map(item => ({
                    productId: item.productId._id,
                    productName: item.productId.productName,
                    quantity: item.quantity,
                    price: item.price,
                    size: item.size,
                }));


                const selectedPaymentOption = document.querySelector('input[name="paymentMethod"]:checked');
                if (!selectedPaymentOption) {
                alert('Please select a payment option.');
                return;
                }



                totalValue = parseFloat(totalValue);

                const orderData = {
                    addressId: selectedAddress.value,
                    cartItems: simplifiedCartItems,
                    totalPrice: totalValue,
                    paymentMethod: selectedPaymentOption.value
                };

                fetch('/placeOrder', {
                    method: 'POST',
                    body: JSON.stringify(orderData),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Order Placed',
                            text: 'Order placed successfully!'
                        }).then(() => {
                            window.location.href = '/shop';
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Order Failed',
                            text: 'Failed to place order. Please try again.'
                        });
                    }
                })
                .catch(error => console.error('Error:', error));
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Payment Failed',
                text: 'Payment verification failed. Please try again.'
            }).then(() => {
                            window.location.href = '/checkOut';
                        });
        }
    })
    .catch(error => console.error('Error:', error));
}


</script>

<script>

//place order without sweet alert

//       function placeOrder() {
//     const selectedPaymentOption = document.querySelector('input[name="paymentMethod"]:checked');
//     if (!selectedPaymentOption) {
//         alert('Please select a payment option.');
//         return;
//     }

//     if (selectedPaymentOption.value === 'razorpay') {
//         const totalValue = document.getElementById("totalAmount").textContent.replace("₹", "").trim();

//         fetch('/createRazorpayOrder', {
//             method: 'POST',
//             body: JSON.stringify({ amount: totalValue, addressId: selectedAddress.value, paymentMethod: 'razorpay' }),
//             headers: { 'Content-Type': 'application/json' }
//         })
//         .then(response => response.json())
//         .then(data => {
//             const options = {
//                 key: data.razorpayKey,
//                 amount: totalValue * 100,
//                 currency: "INR",
//                 name: "Your Company",
//                 description: "Test Transaction",
//                 order_id: data.orderId,
//                 handler: function (response) {
//                     verifyPayment(response);
//                 },
//                 prefill: {
//                     name: "Sandeep",
//                     email: "sandeep@gmail.com",
//                     contact: "9847242891"
//                 }
//             };
//             const rzp1 = new Razorpay(options);
//             rzp1.open();
//         })
//         .catch(error => console.error('Error:', error));
//     } else {
//         const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
//             if (!selectedAddress) {
//                 alert('Please select an address.');
//                 return;
//             }
//             // Access the total amount element
//             const totalElement = document.getElementById("totalAmount");

//             // Extract the total value (remove the ₹ symbol if necessary)
//             let totalValue = totalElement.textContent.replace("₹", "").trim();
    
//             // Get the cart items from the session
//             const cartItems = '<%- JSON.stringify(cart) %>'; // Inject cart items from the server into JS
            
//               // Parse the cartItems string to ensure it's a valid array of objects
//              let parsedCartItems;
//              try {
//                parsedCartItems = JSON.parse(cartItems);  // Parse the stringified JSON
//              } catch (error) {
//               alert('Error parsing cart items.');
//              return;
//              }


//               // Simplify cart items to include only necessary properties
//         const simplifiedCartItems = parsedCartItems.map(item => ({
//             productId: item.productId._id,
//             productName: item.productId.productName,
//             quantity: item.quantity,
//             price: item.price,
//             size: item.size,
//         }));


//         const selectedPaymentOption = document.querySelector('input[name="paymentMethod"]:checked');
//         if (!selectedPaymentOption) {
//             alert('Please select a payment option.');
//             return;
//         }

//             totalValue = parseFloat(totalValue);
            
//             // Prepare the data to be sent to the server
//             const orderData = {
//                 addressId: selectedAddress.value, // Selected address ID
//                 cartItems: simplifiedCartItems,             // Product details from cart
//                 totalPrice: totalValue,            // Total price of the order
//                 paymentMethod: selectedPaymentOption.value // Selected payment option
//             };
//             // req.session.address = addressId;
//             // Send the order data to the backend
//             fetch('/placeOrder', {
//                 method: 'POST',
//                 body: JSON.stringify(orderData),
//                 headers: {
//                     'Content-Type': 'application/json'
//                 }
//             })
//             .then(response => response.json())
//             .then(data => {
//                 if (data.success) {
//                     alert('Order placed successfully!');
//                     window.location.href = '/shop';  // Redirect to order confirmation
//                 } else {
//                     // alert('Failed to place order. Please try again.');
//                     alert(data.message);
//                 }
//             })
//             .catch(error => console.error('Error:', error));
        
//     }
// }












// function verifyPayment(response) {
//     fetch('/verifyRazorpayPayment', {
//         method: 'POST',
//         body: JSON.stringify(response),
//         headers: { 'Content-Type': 'application/json' }
//     })
//     .then(response => response.json())
//     .then(data => {
//         if (data.success) {
//             alert('Payment verified successfully!');
//             window.location.href = '/orderConfirmation';
//         } else {
//             alert('Payment verification failed. Please try again.');
//         }
//     })
//     .catch(error => console.error('Error:', error));
// }



// function verifyPayment(response) {
//     const paymentDetails = {
//         razorpay_payment_id: response.razorpay_payment_Id,
//         razorpay_order_id: response.razorpay_order_Id,
//         razorpay_signature: response.razorpay_signature,
//         cartItems: '<%- JSON.stringify(cart) %>',  // Make sure cart items are available on the page
//         totalPrice: document.getElementById("totalAmount").textContent.replace("₹", "").trim(),
//         addressId: selectedAddress.value  // Assuming you have the selected address
//     };

//     fetch('/verifyRazorpayPayment', {
//         method: 'POST',
//         body: JSON.stringify(paymentDetails),
//         headers: {
//             'Content-Type': 'application/json'
//         }
//     })
//     .then(response => response.json())
//     .then(data => {
//         if (data.success) {
//             alert('Payment verified and order placed!');
//             window.location.href = '/orderConfirmation';  // Redirect to confirmation page
//         } else {
//             alert('Payment verification failed. Please try again.');
//         }
//     })
//     .catch(error => console.error('Error:', error));
// }





//verify payment without sweet alert

// function verifyPayment(response) {
//     const paymentDetails = {
//         razorpay_payment_id: response.razorpay_payment_Id,
//         razorpay_order_id: response.razorpay_order_Id,
//         razorpay_signature: response.razorpay_signature,
//         cartItems: '<%- JSON.stringify(cart) %>',  // Make sure cart items are available on the page
//         totalPrice: document.getElementById("totalAmount").textContent.replace("₹", "").trim(),
//         addressId: selectedAddress.value  // Assuming you have the selected address
//     };

//     fetch('/verifyRazorpayPayment', {
//         method: 'POST',
//         body: JSON.stringify(paymentDetails),
//         headers: {
//             'Content-Type': 'application/json'
//         }
//     })
//     .then(response => response.json())
//     .then(data => {
//         if (data.success) {
//             alert('Payment verified and order placed!');
//             const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
//             if (!selectedAddress) {
//                 alert('Please select an address.');
//                 return;
//             }
//             // Access the total amount element
//             const totalElement = document.getElementById("totalAmount");

//             // Extract the total value (remove the ₹ symbol if necessary)
//             let totalValue = totalElement.textContent.replace("₹", "").trim();
    
//             // Get the cart items from the session
//             const cartItems = '<%- JSON.stringify(cart) %>'; // Inject cart items from the server into JS
            
//               // Parse the cartItems string to ensure it's a valid array of objects
//              let parsedCartItems;
//              try {
//                parsedCartItems = JSON.parse(cartItems);  // Parse the stringified JSON
//              } catch (error) {
//               alert('Error parsing cart items.');
//              return;
//              }


//               // Simplify cart items to include only necessary properties
//         const simplifiedCartItems = parsedCartItems.map(item => ({
//             productId: item.productId._id,
//             productName: item.productId.productName,
//             quantity: item.quantity,
//             price: item.price,
//             size: item.size,
//         }));


//         const selectedPaymentOption = document.querySelector('input[name="paymentMethod"]:checked');
//         if (!selectedPaymentOption) {
//             alert('Please select a payment option.');
//             return;
//         }

//             totalValue = parseFloat(totalValue);
            
//             // Prepare the data to be sent to the server
//             const orderData = {
//                 addressId: selectedAddress.value, // Selected address ID
//                 cartItems: simplifiedCartItems,             // Product details from cart
//                 totalPrice: totalValue,            // Total price of the order
//                 paymentMethod: selectedPaymentOption.value // Selected payment option
//             };
    
//             // Send the order data to the backend
//             fetch('/placeOrder', {
//                 method: 'POST',
//                 body: JSON.stringify(orderData),
//                 headers: {
//                     'Content-Type': 'application/json'
//                 }
//             })
//             .then(response => response.json())
//             .then(data => {
//                 if (data.success) {
//                     // alert('Order placed successfully!');
//                     window.location.href = '/shop';  // Redirect to order confirmation
//                 } else {
//                     alert('Failed to place order. Please try again.');
                    
//                 }
//             })
//             .catch(error => console.error('Error:', error));
        
//             // window.location.href = '/shop';  // Redirect to confirmation page
//         } else {
//             alert('Payment verification failed. Please try again.');
//         }
//     })
//     .catch(error => console.error('Error:', error));
// }














</script>













































<!--place order new -->>
<!-- <script>

    function placeOrder() {
            const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
            if (!selectedAddress) {
                alert('Please select an address.');
                return;
            }
            // Access the total amount element
            const totalElement = document.getElementById("totalAmount");

            // Extract the total value (remove the ₹ symbol if necessary)
            let totalValue = totalElement.textContent.replace("₹", "").trim();
    
            // Get the cart items from the session
            const cartItems = '<%- JSON.stringify(cart) %>'; // Inject cart items from the server into JS
            
              // Parse the cartItems string to ensure it's a valid array of objects
             let parsedCartItems;
             try {
               parsedCartItems = JSON.parse(cartItems);  // Parse the stringified JSON
             } catch (error) {
              alert('Error parsing cart items.');
             return;
             }


              // Simplify cart items to include only necessary properties
        const simplifiedCartItems = parsedCartItems.map(item => ({
            productId: item.productId._id,
            productName: item.productId.productName,
            quantity: item.quantity,
            price: item.price,
            size: item.size,
        }));


        const selectedPaymentOption = document.querySelector('input[name="paymentMethod"]:checked');
        if (!selectedPaymentOption) {
            alert('Please select a payment option.');
            return;
        }

            totalValue = parseFloat(totalValue);
            
            // Prepare the data to be sent to the server
            const orderData = {
                addressId: selectedAddress.value, // Selected address ID
                cartItems: simplifiedCartItems,             // Product details from cart
                totalPrice: totalValue,            // Total price of the order
                paymentMethod: selectedPaymentOption.value // Selected payment option
            };
    
            // Send the order data to the backend
            fetch('/placeOrder', {
                method: 'POST',
                body: JSON.stringify(orderData),
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Order placed successfully!');
                    window.location.href = '/orderConfirmation';  // Redirect to order confirmation
                } else {
                    alert('Failed to place order. Please try again.');
                }
            })
            .catch(error => console.error('Error:', error));
        }
    
    </script> -->






<!--placed order with wallet-->>
<!-- 
 <script>
    function placeOrder() {
        const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
        if (!selectedAddress) {
            alert('Please select an address.');
            return;
        }

        const totalElement = document.getElementById("totalAmount");
        let totalValue = parseFloat(totalElement.textContent.replace("₹", "").trim());

        const cartItems = '<%- JSON.stringify(cart) %>'; // Inject cart items from the server into JS
        let parsedCartItems;
        try {
            parsedCartItems = JSON.parse(cartItems);
        } catch (error) {
            alert('Error parsing cart items.');
            return;
        }

        const simplifiedCartItems = parsedCartItems.map(item => ({
            productId: item.productId._id,
            productName: item.productId.productName,
            quantity: item.quantity,
            price: item.price,
            size: item.size,
        }));

        const selectedPaymentOption = document.querySelector('input[name="paymentMethod"]:checked');
        if (!selectedPaymentOption) {
            alert('Please select a payment option.');
            return;
        }

        if (selectedPaymentOption.value === 'wallet') {
            fetch('/getWalletBalance')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const walletBalance = data.balance;
                        if (walletBalance >= totalValue) {
                            proceedWithOrder(simplifiedCartItems, totalValue, selectedAddress.value, selectedPaymentOption.value);
                        } else {
                            alert('Insufficient wallet balance. Please select another payment method.');
                        }
                    } else {
                        alert('Failed to retrieve wallet balance. Please try again.');
                    }
                })
                .catch(error => console.error('Error:', error));
        } else {
            proceedWithOrder(simplifiedCartItems, totalValue, selectedAddress.value, selectedPaymentOption.value);
        }
    }

    function proceedWithOrder(cartItems, totalValue, addressId, paymentMethod) {
        const orderData = {
            addressId,
            cartItems,
            totalPrice: totalValue,
            paymentMethod
        };

        fetch('/placeOrder', {
            method: 'POST',
            body: JSON.stringify(orderData),
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Order placed successfully!');
                window.location.href = '/orderConfirmation';
            } else {
                alert('Failed to place order. Please try again.');
            }
        })
        .catch(error => console.error('Error:', error));
    }
</script> -->






