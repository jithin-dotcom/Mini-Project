<%- include("../../views/partials/user/header") %>
<div class="container mt-6" style="margin-top: 120px;" >
   <h3 class="mt-3" style="color: #046963; margin-bottom:70px">Edit User Address</h3>
   <form id="addressForm" method="POST" action="/editAddress?id=<%= address._id.toLocaleString() %>" class="border-0 p-3">
       <div class="row mb-50">
           <div class="form-group col-md-4">
               <label for="addressType">Address Type:</label>
               <input type="text" class="form-control border-3" value="<%= address.addressType %>" id="addressType" name="addressType" required>
           </div>
           <div class="form-group col-md-4">
               <label for="name">Name:</label>
               <input type="text" class="form-control border-3" value="<%= address.name %>" id="name" name="name" required>
           </div>
           <div class="form-group col-md-4">
               <label for="city">City:</label>
               <input type="text" class="form-control border-3" id="city" value="<%= address.city %>" name="city" required>
           </div>
       </div>
       <div class="row mb-3">
           <div class="form-group col-md-4">
               <label for="landMark">Landmark:</label>
               <input type="text" class="form-control border-3" value="<%= address.landMark%>" id="landMark" name="landMark" required>
           </div>
           <div class="form-group col-md-4">
               <label for="state">State:</label>
               <input type="text" class="form-control border-3" value="<%= address.state %>" id="state" name="state" required>
           </div>
           <div class="form-group col-md-4">
               <label for="pincode">Pincode:</label>
               <input type="number" class="form-control border-3" value="<%= address.pincode %>" id="pincode" name="pincode" required>
           </div>
       </div>
       <div class="row mb-3">
           <div class="form-group col-md-4">
               <label for="phone">Phone:</label>
               <input type="number" class="form-control border-3" id="phone" value="<%= address.phone %>" name="phone" required>
           </div>
           <div class="form-group col-md-4">
               <label for="altPhone">Alternate Phone:</label>
               <input type="number" class="form-control border-3" id="altPhone" value="<%= address.altPhone %>" name="altPhone" required>
           </div>
       </div>
       <button type="submit" id="submitButton" class="btn btn-primary">Submit</button>
   </form>
</div>



<script>
  
    document.getElementById('addressForm').addEventListener('submit', function(event) {
        if (!validateForm()) {
            event.preventDefault();
        }
    });
 
    function validateForm() {
        let isValid = true;
        const requiredFields = ["addressType", "name", "city", "landMark", "state", "pincode", "phone", "altPhone"];
        requiredFields.forEach(function(field) {
            const input = document.getElementById(field);
            const inputValue = input.value.trim();
            const errorElement = document.getElementById(field + '-error');
 
            if (inputValue === "") {
                if (!errorElement) {
                    const errorMessage = "This field is required.";
                    const errorDiv = document.createElement('div');
                    errorDiv.className = "text-danger";
                    errorDiv.textContent = errorMessage;
                    errorDiv.id = field + '-error';
                    input.parentNode.appendChild(errorDiv);
                }
                isValid = false;
            } else {
                if (errorElement) {
                    errorElement.remove();
                }
            }
        });
 
        const addressType = document.getElementById('addressType').value;
        const name = document.getElementById('name').value;
        const city = document.getElementById('city').value;
        const landMark = document.getElementById('landMark').value;
        const state = document.getElementById('state').value;
        const pincode = document.getElementById('pincode').value;
        const phone = document.getElementById('phone').value;
        const altPhone = document.getElementById('altPhone').value;
        const namePattern = /^[A-Za-z\s]+$/;
        const pincodePattern = /^\d{6}$/;
        const phonePattern = /^\d{10}$/;
        let phoneRegex = /^[1-9][0-9]{9}$/; // Ensures phone number is 10 digits and doesn't start with 0
        if (!namePattern.test(name)) {
            Swal.fire({
                title: 'Error',
                text: 'Name should contain alphabets only.',
                icon: 'error'
            });
            isValid = false;
        }
        if (!namePattern.test(city)) {
            Swal.fire({
                title: 'Error',
                text: 'City should contain alphabets only.',
                icon: 'error'
            });
            isValid = false;
        }
        if (!namePattern.test(landMark)) {
            Swal.fire({
                title: 'Error',
                text: 'Landmark should contain alphabets only.',
                icon: 'error'
            });
            isValid = false;
        }
        if (!namePattern.test(state)) {
            Swal.fire({
                title: 'Error',
                text: 'State should contain alphabets only.',
                icon: 'error'
            });
            isValid = false;
        }
        if (!pincodePattern.test(pincode)) {
            Swal.fire({
                title: 'Error',
                text: 'Pincode should be a 6-digit number.',
                icon: 'error'
            });
            isValid = false;
        }
        if (!phoneRegex.test(phone)) {
            Swal.fire({
                title: 'Error',
                text: 'Phone number should be a 10-digit number.',
                icon: 'error'
            });
            isValid = false;
        }
        if (!phoneRegex.test(altPhone)) {
            Swal.fire({
                title: 'Error',
                text: 'Alternate phone number should be a 10-digit number.',
                icon: 'error'
            });
            isValid = false;
        }
        if (phone === altPhone) {
            Swal.fire({
                title: 'Error',
                text: 'Phone number and alternate phone number should be different.',
                icon: 'error'
            });
            isValid = false;
        }
        // Check if phone is a sequence of the same number (like 0000000000, 1111111111, etc.)
        if (/^(\d)\1{9}$/.test(phone) || (altPhone && /^(\d)\1{9}$/.test(altPhone))) {
           swal.fire('Error', 'Phone numbers cannot be repetitive like 0000000000 or 1111111111.', 'error');
           event.preventDefault();
           return;
       }
        return isValid;
    }
 </script>







<!-- <script>
   document.getElementById('submitButton').addEventListener('click', function (event) {
       if (!validateForm()) {
           event.preventDefault();
       }
   });

   function validateForm() {
       let isValid = true;
       const requiredFields = ["addressType", "name", "city", "landMark", "state", "pincode", "phone", "altPhone"];
       requiredFields.forEach(function (field) {
           const input = document.getElementById(field);
           if (input.value.trim() === "") {
               Swal.fire({
                   title: 'Error',
                   text: `Please fill all the field.`,
                   icon: 'error'
               });
               isValid = false;
           }
       });

       return isValid;
   }
</script> -->
<%- include("../../views/partials/user/footer") %>


